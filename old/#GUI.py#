import tkinter as tk
from tkinter import ttk
from tkmacosx import Button # Only for macOS users
import cv2


from database import Database


# Fonts
TITLE_FONT = ("Impact", 140, "bold")
TITLE_FONT_2 = ("Fixedsys", 80, "bold")
SUBTITLE_FONT = ("Fixedsys", 24, "bold")
SUBTITLE_FONT_2 = ("Fixedsys", 40, "bold")
BODY_FONT = ("Verdana", 14)
BODY_FONT2 = ("Verdana", 20)


DB = Database()

DB.upload_question("e", 0)

class MatrixMate(tk.Tk):
    def __init__(self, *args, **kwargs):

        tk.Tk.__init__(self, *args, **kwargs)
        tk.Tk.wm_title(self, "MatrixMate")
        screen = tk.Frame(self)
        screen.pack(side="top", fill="both", expand=True)
        screen.grid_rowconfigure(0, weight=1)
        screen.grid_columnconfigure(0, weight=1)

        self.frames = {}
        

        for i in (Login, Registration, MainMenu, Visualize, Quiz, Assignments, Leaderboard, Help):
            frame = i(screen, self)
            self.frames[i] = frame
            frame.grid(row=0, column=0, sticky="nsew")
        self.show_frame(Login)


    def show_frame(self, cont):
        frame = self.frames[cont]
        frame.event_generate("<<ShowFrame>>")
        frame.tkraise()


class Login(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.username = tk.StringVar()
        self.password = tk.StringVar()

        self.title = tk.Label(self, text="MatrixMate", fg="#ffaa00", font=TITLE_FONT)
        self.title.place(anchor="center", relx=0.5, rely=0.11)
        app_info = tk.Label(self, text="An app to test your linear algebra knowledge with questions,\n"
                                          "class leaderboard and also matrix visualisation.",
                               fg="#ffaa00", font=BODY_FONT2)
        app_info.place(anchor="center", relx=0.5, rely=0.25)
        self.logintitle = tk.Label(self, text="Login to save your scores", fg="#ffaa00", font=SUBTITLE_FONT_2)
        self.logintitle.place(anchor="center", relx=0.5, rely=0.35)
        self.usernamelabel = tk.Label(self, text="Username:", fg="#ffaa00", font=SUBTITLE_FONT)
        self.usernamelabel.place(anchor="center", relx=0.35, rely=0.45)
        self.passwordlabel = tk.Label(self, text="Password:", fg="#ffaa00", font=SUBTITLE_FONT)
        self.passwordlabel.place(anchor="center", relx=0.35, rely=0.55)
        self.usernameentry = tk.Entry(self, font=SUBTITLE_FONT, justify="center", textvariable=self.username)
        self.usernameentry.place(anchor="center", relx=0.54, rely=0.45, relwidth=0.29, relheight=0.07)
        passwordentry = tk.Entry(self, font=SUBTITLE_FONT, justify="center", show="*", textvariable=self.password)
        passwordentry.place(anchor="center", relx=0.54, rely=0.55, relwidth=0.29, relheight=0.07)
        registerbutton = Button(self, text="Register", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                   command=lambda: controller.show_frame(Registration))
        registerbutton.place(anchor="center", relx=0.4, rely=0.65, relwidth=0.19, relheight=0.1)
        loginbutton = Button(self, text="Login", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=lambda: [DB.find_user(self.username.get(), self.password.get(), 'user'),
                                                 controller.show_frame(MainMenu)
                                                 if DB.success_check()
                                                 else controller.show_frame(Login)])
        loginbutton.place(anchor="center", relx=0.6, rely=0.65, relwidth=0.19, relheight=0.1)
        explanation = tk.Label(self, text="register to create an account allowing you to compete on the leaderboards\n"
                                          "press below to continue as a guest, your scores will not be saved.",
                               fg="#ffaa00", font=BODY_FONT)
        explanation.place(anchor="center", relx=0.5, rely=0.75)
        guestbutton = Button(self, text="Continue as a Guest", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=lambda: [DB.find_user('', '', 'guest'), controller.show_frame(MainMenu)])
        guestbutton.place(anchor="center", relx=0.5, rely=0.85, relwidth=0.4, relheight=0.1)

class Registration(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.username = tk.StringVar()
        self.password = tk.StringVar()
        self.password2 = tk.StringVar()
        self.title = tk.Label(self, text="MatrixMate", fg="#ffaa00", font=TITLE_FONT)
        self.title.place(anchor="center", relx=0.5, rely=0.11)
        self.registertitle = tk.Label(self, text="Account Registration Form", fg="#ffaa00", font=SUBTITLE_FONT_2)
        self.registertitle.place(anchor="center", relx=0.5, rely=0.25)
        self.usernamelabel = tk.Label(self, text="Username:", fg="#ffaa00", font=SUBTITLE_FONT)
        self.usernamelabel.place(anchor="center", relx=0.35, rely=0.45)
        self.passwordlabel = tk.Label(self, text="Password:", fg="#ffaa00", font=SUBTITLE_FONT)
        self.passwordlabel.place(anchor="center", relx=0.35, rely=0.55)
        self.password2label = tk.Label(self, text="re-enter\nPassword:", fg="#ffaa00", font=SUBTITLE_FONT)
        self.password2label.place(anchor="center", relx=0.35, rely=0.64)
        self.usernameentry = tk.Entry(self, font=SUBTITLE_FONT, justify="center", textvariable=self.username)
        self.usernameentry.place(anchor="center", relx=0.54, rely=0.45, relwidth=0.29, relheight=0.07)
        self.passwordentry = tk.Entry(self, font=SUBTITLE_FONT, justify="center", show="*", textvariable=self.password)
        self.passwordentry.place(anchor="center", relx=0.54, rely=0.55, relwidth=0.29, relheight=0.07)
        self.password2entry = tk.Entry(self, font=SUBTITLE_FONT, justify="center", show="*",
                                       textvariable=self.password2)
        self.password2entry.place(anchor="center", relx=0.54, rely=0.65, relwidth=0.29, relheight=0.07)
        self.backbutton = Button(self, text="Back", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                    command=lambda: controller.show_frame(Login))
        self.backbutton.place(anchor="center", relx=0.4, rely=0.75, relwidth=0.19, relheight=0.1)
        role_label = tk.Label(self, text="I am a:", fg="#ffaa00", font=SUBTITLE_FONT)
        role_label.place(anchor="center", relx=0.365, rely=0.35)

        self.user_type = ""

        self.student_button = Button(self, text='Student', font=SUBTITLE_FONT, bg='#1f1f1f', fg='#ffaa00', activebackground='#1f1f1f', command=self.on_student_button_clicked)
        self.student_button.place(relx=0.467, rely=0.35, anchor='center', relheight=0.07, relwidth=0.14)
        self.teacher_button = Button(self, text='Teacher', font=SUBTITLE_FONT, bg='#1f1f1f', fg='#ffaa00', activebackground='#1f1f1f', command=self.on_teacher_button_clicked)
        self.teacher_button.place(relx=0.613, rely=0.35, anchor='center', relheight=0.07, relwidth=0.14)

        self.registerbutton = Button(self, text="Register", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                        command=lambda: [DB.register_user(self.username.get(), self.password.get(),
                                                                          self.password2.get(), self.user_type),
                                                         self.clear_details(), controller.show_frame(Login)
                                                         if DB.success_check()
                                                         else (controller.show_frame(Registration))])
        self.registerbutton.place(anchor="center", relx=0.6, rely=0.75, relwidth=0.19, relheight=0.1)
        self.password_explained = tk.Label(self, text="Password must be at least 8 characters "
                                                      "long and should contain at least\n"
                                                      "one number, one uppercase character "
                                                      "and one lowercase character.",
                                           fg="#FF0000", font=BODY_FONT)
        self.password_explained.place(anchor="center", relx=0.5, rely=0.85)

    def clear_details(self):
        self.passwordentry.delete(0, 'end')
        self.password2entry.delete(0, 'end')
    
    def on_student_button_clicked(self):
        self.student_button.configure(bg='#ffaa00', fg='white')
        self.teacher_button.configure(bg='#1f1f1f', fg='#ffaa00')
        self.user_type = "student"


    def on_teacher_button_clicked(self):
        self.teacher_button.configure(bg='#ffaa00', fg='white')
        self.student_button.configure(bg='#1f1f1f', fg='#ffaa00')
        self.user_type = "teacher"

class MainMenu(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.logout = Button(self, text="Log Out", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                           command=lambda: [DB.logout(), controller.show_frame(Login)])
        self.logout.place(anchor="center", relx=0.91, rely=0.06, relwidth=0.15, relheight=0.08)

        self.help = Button(self, text="Help", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                           command=lambda: [DB.logout(), controller.show_frame(Help)])
        self.help.place(anchor="center", relx=0.75, rely=0.06, relwidth=0.15, relheight=0.08)

        self.title = tk.Label(self, text="MatrixMate", fg="#ffaa00", font=TITLE_FONT)
        self.title.place(anchor="center", relx=0.5, rely=0.22)

        self.quiz_button = Button(self, text="Quiz Time", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=lambda: controller.show_frame(Quiz))

        self.quiz_button.place(anchor="center", relx=0.5, rely=0.42, relwidth=0.25, relheight=0.12)

        self.vis_button = Button(self, text="Visualize Matricies", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=lambda: controller.show_frame(Visualize))

        self.vis_button.place(anchor="center", relx=0.5, rely=0.57, relwidth=0.25, relheight=0.12)

        self.asign_button = Button(self, text="Assignments", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=lambda: controller.show_frame(Assignments))

        self.asign_button.place(anchor="center", relx=0.5, rely=0.72, relwidth=0.25, relheight=0.12)

        self.lboard_button = Button(self, text="Leaderboard", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=lambda: controller.show_frame(Leaderboard))

        self.lboard_button.place(anchor="center", relx=0.5, rely=0.87, relwidth=0.25, relheight=0.12)


class Visualize(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        #self.config(bg="Black")

        # create dropdown menu
        '''self.menu_var = tk.StringVar(value="")
        self.menu = ttk.Combobox(self, values=["Matrix Addition", "Matrix Multiplication", "Vector/Matrix transformation", "System of Linear Equations", "3D Matrix Visualisation"], 
                                 textvariable=self.menu_var, state="readonly", background="#1f1f1f", foreground="#ffaa00")
        self.menu.place(relx=0.5, rely=0.05, anchor="center", relwidth=0.15, relheight=0.05, bordermode="outside")'''
        self.temp_widgets = []
        self.entries = []
        self.entries2 = []
        self.vector = []
        self.prev_pressed = None
        self.add_button = Button(self, text="Matrix Addition", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=BODY_FONT,
                                command=lambda: [self.press_button(self.add_button), self.addition()])
        self.add_button.place(anchor="center", relx=0.1, rely=0.045, relwidth=0.16, relheight=0.05)

        self.trans_button = Button(self, text="Vector/Matrix Transformation", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", 
                                 font=BODY_FONT, command=lambda: [self.press_button(self.trans_button), self.transform()])
        self.trans_button.place(anchor="center", relx=0.263, rely=0.045, relwidth=0.16, relheight=0.05)

        self.mult_button = Button(self, text="Matrix Multiplication", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", 
                                font=BODY_FONT, command=lambda: [self.press_button(self.mult_button), self.multiply()])
        self.mult_button.place(anchor="center", relx=0.426, rely=0.045, relwidth=0.16, relheight=0.05)

        self.eq_button = Button(self, text="System of Linear Equations", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", 
                                font=BODY_FONT, command=lambda: [self.press_button(self.eq_button), self.linear_eq()])
        self.eq_button.place(anchor="center", relx=0.589, rely=0.045, relwidth=0.16, relheight=0.05)

        self.threeD_button = Button(self, text="2D Matrix Visualisation", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", 
                                font=BODY_FONT, command=lambda: self.press_button(self.threeD_button))
        self.threeD_button.place(anchor="center", relx=0.752, rely=0.045, relwidth=0.16, relheight=0.05)

        self.two_button = Button(self, text="2 X 2", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", 
                                font=BODY_FONT, command=lambda: self.display_matrix(self.mat_size_but(self.two_button)))
        self.three_button = Button(self, text="3 X 3", bg='#ffaa00', fg='white', activebackground="#212121", 
                                font=BODY_FONT, command=lambda: self.display_matrix(self.mat_size_but(self.three_button)))
        


        self.vis_button = Button(self, text="Visualize", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=self.play_video)
        self.vis_button.place(anchor="center", relx=0.5, rely=0.3, relwidth=0.15, relheight=0.07)

        self.back_button = Button(self, text="Back To Menu", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=lambda: controller.show_frame(MainMenu))
        self.back_button.place(anchor="center", relx=0.91, rely=0.06, relwidth=0.15, relheight=0.08)



        self.canvas = tk.Canvas(self, width=910, height=520, highlightthickness=0)
        self.canvas.place(anchor="center", relx=0.5, rely=0.67)

        rect = self.round_rectangle(5, 5, 905, 515, radius=25, fill="#000000")
        self.canvas.tag_lower(rect)

    def press_button(self, button):
        button.configure(bg='#ffaa00', fg='white')
        if self.prev_pressed != None and self.prev_pressed != button:
            self.prev_pressed.configure(bg='#1f1f1f', fg='#ffaa00')
        self.prev_pressed = button

    def mat_size_but(self, button):
        button.configure(bg='#ffaa00', fg='white')
        if button == self.two_button:
            self.three_button.configure(bg='#1f1f1f', fg='#ffaa00')
            self.display_matrix(2)
        else:
            self.two_button.configure(bg='#1f1f1f', fg='#ffaa00')
            self.display_matrix(3)
    
    def display_matrix(self, size):
        self.clear_matrix()
        if size == 2:
            constx = 0.435
            consty = 0.15
            constx2 = 0.535
            consty2 = 0.15
        else:
            constx = 0.41
            consty = 0.13
            constx2 = 0.53
            consty2 = 0.13
        for  in range(size):
            row = []
            row2 = []
            for j in range(size):
                box = tk.Entry(self, width=2)
                box.place(relx=constx+0.03*i, rely=consty+0.04*j, anchor="center")
                row.append(box)

                box2 = tk.Entry(self, width=2)
                box2.place(relx=constx2+0.03*i, rely=consty2+0.04*j, anchor="center")
                row2.append(box2)
            self.entries.append(row)
            self.entries2.append(row2)

    def clear_matrix(self):
        for i in range(len(self.entries)):
            for j in range(len(self.entries[i])):
                self.entries[i][j].destroy()
                if self.entries2 != []:
                    self.entries2[i][j].destroy()
        for i in self.vector:
            i.destroy()
        self.vector = []
        self.entries = []
        self.entries2 = []

    def create_mat_buttons(self):
        self.two_button = Button(self, text="2 X 2", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", 
                                font=BODY_FONT, command=lambda: self.mat_size_but(self.two_button))
        self.three_button = Button(self, text="3 X 3", bg='#ffaa00', fg='white', activebackground="#212121", 
                                font=BODY_FONT, command=lambda: self.mat_size_but(self.three_button))
        self.two_button.place(anchor="center", relx=0.39, rely=0.28, relwidth=0.05, relheight=0.03)
        self.three_button.place(anchor="center", relx=0.39, rely=0.32, relwidth=0.05, relheight=0.03)
        self.temp_widgets.append(self.two_button)
        self.temp_widgets.append(self.three_button)

    def clear_screen(self):
        self.clear_matrix()
        for widget in self.temp_widgets:
            widget.destroy()
        self.temp_widgets = []
        
    def addition(self):
        self.clear_screen()
        self.display_matrix(3)
        self.create_mat_buttons()
        self.plus_sign = tk.Label(self, text="+", font=SUBTITLE_FONT_2)
        self.plus_sign.place(anchor="center", relx=0.5, rely=0.165)
        self.temp_widgets.append(self.plus_sign)

    
    def multiply(self):
        self.clear_screen()
        self.display_matrix(3)
        self.create_mat_buttons()
        self.mult_sign = tk.Label(self, text="×", font=SUBTITLE_FONT_2)
        self.mult_sign.place(anchor="center", relx=0.5, rely=0.165)
        self.temp_widgets.append(self.mult_sign)

    def transform(self):
        self.clear_screen()
        for i in range(2):
            row = []
            for j in range(2):
                box = tk.Entry(self, width=2)
                box.place(relx=0.445+0.03*i, rely=0.15+0.04*j, anchor="center")
                row.append(box)
            self.entries.append(row)
            box2 = tk.Entry(self, width=2)
            box2.place(relx=0.545, rely=0.15+0.04*i, anchor="center")
            self.vector.append(box2)
        self.trans_sign = tk.Label(self, text="by", font=SUBTITLE_FONT)
        self.trans_sign.place(anchor="center", relx=0.51, rely=0.165)
        self.temp_widgets.append(self.trans_sign)

    def linear_eq(self):
        self.clear_screen()
        letters = ['x', 'y', 'z']
        for i in range(3):
            row = []
            for j in range(3):
                box = tk.Entry(self, width=2)
                box.place(relx=0.405+0.06*i, rely=0.15+0.04*j, anchor="center")
                letter = tk.Label(self, text=letters[i], font=SUBTITLE_FONT)
                letter.place(anchor="center", relx=0.425+0.06*i, rely=0.15+0.04*j)
                self.temp_widgets.append(letter)
                if i != 2:
                    plus = tk.Label(self, text="+", font=SUBTITLE_FONT)
                    plus.place(anchor="center", relx=0.445+0.06*i, rely=0.15+0.04*j)
                    self.temp_widgets.append(plus)
                row.append(box)
            self.entries.append(row)

        for y in range(3):
            equal = tk.Label(self, text="=", font=SUBTITLE_FONT)
            equal.place(anchor="center", relx=0.57, rely=0.15+0.04*y)
            self.temp_widgets.append(equal)
            box = tk.Entry(self, width=2)
            box.place(relx=0.6, rely=0.15+0.04*y, anchor="center")
            self.vector.append(box)

    def round_rectangle(self, x1, y1, x2, y2, radius=25, **kwargs):
        
        points = [x1+radius, y1,
                x1+radius, y1,
                x2-radius, y1,
                x2-radius, y1,
                x2, y1,
                x2, y1+radius,
                x2, y1+radius,
                x2, y2-radius,
                x2, y2-radius,
                x2, y2,
                x2-radius, y2,
                x2-radius, y2,
                x1+radius, y2,
                x1+radius, y2,
                x1, y2,
                x1, y2-radius,
                x1, y2-radius,
                x1, y1+radius,
                x1, y1+radius,
                x1, y1]
        
        return self.canvas.create_polygon(points, **kwargs, smooth=True)
        
    def play_video(self):
        cap = cv2.VideoCapture('test_video.mp4') 
        ret, frame = cap.read()
        
        # loop through frames and display them in the canvas
        while ret:
            img = self.cv2_to_photoimage(frame)
            self.canvas.create_image(15, 15, anchor=tk.NW, image=img)
            self.canvas.update()
            for i in range(4):
                ret, frame = cap.read()

        img = self.cv2_to_photoimage(frame)
        self.canvas.create_image(15, 15, anchor=tk.NW, image=img)
        self.canvas.update()


        cap.release()
        
    def cv2_to_photoimage(self, cv2_image):
        return tk.PhotoImage(data=cv2.imencode('.png', cv2_image)[1].tobytes())

    
class Leaderboard(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.title_label = tk.Label(self, text="Leaderboard", font=TITLE_FONT, fg="#ffaa00")
        self.title_label.place(anchor="center", relx=0.5, rely=0.1)

        self.rank_label = tk.Label(self, text="RANK", font=SUBTITLE_FONT_2, fg="#ffaa00")
        self.rank_label.place(anchor="center", relx=0.3, rely=0.25)
        self.player_label = tk.Label(self, text="PLAYER", font=SUBTITLE_FONT_2, fg="#ffaa00")
        self.player_label.place(anchor="center", relx=0.5, rely=0.25)
        self.score_label = tk.Label(self, text="SCORE", font=SUBTITLE_FONT_2,  fg="#ffaa00")
        self.score_label.place(anchor="center", relx=0.7, rely=0.25)

        self.back_button = Button(self, text="Back To Menu", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=lambda: controller.show_frame(MainMenu))
        self.back_button.place(anchor="center", relx=0.91, rely=0.06, relwidth=0.15, relheight=0.08)

        self.update_score_button = Button(self, text="Update Scores", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=self.updateScores)
        self.update_score_button.place(anchor="center", relx=0.91, rely=0.16, relwidth=0.15, relheight=0.08)





        self.updateScores()

    def updateScores(self):
        scores = DB.get_scores()

        # Keep track of the label widgets
        labels_to_remove = []
        
        for child in self.winfo_children():
            if child not in [self.rank_label, self.player_label, self.score_label, self.back_button, self.update_score_button, self.title_label]:
                labels_to_remove.append(child)
        
        for label in labels_to_remove:
            label.destroy()

        for i in range(min(len(scores), 10)):
            username, score = scores[i]
            self.rank = tk.Label(self, text=f"{i+1}", font=SUBTITLE_FONT)
            self.rank.place(anchor="center", relx=0.3, rely=0.32 + 0.07*i)
            self.player = tk.Label(self, text=username, font=SUBTITLE_FONT)
            self.player.place(anchor="center", relx=0.5, rely=0.32 + 0.07*i)
            self.score = tk.Label(self, text=score, font=SUBTITLE_FONT)
            self.score.place(anchor="center", relx=0.7, rely=0.32 + 0.07*i)

class Assignments(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.back_button = Button(self, text="Back To Menu", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=lambda: controller.show_frame(MainMenu))
        self.back_button.place(anchor="center", relx=0.91, rely=0.06, relwidth=0.15, relheight=0.08)

class Quiz(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.back_button = Button(self, text="Back To Menu", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=lambda: controller.show_frame(MainMenu))
        self.back_button.place(anchor="center", relx=0.91, rely=0.06, relwidth=0.15, relheight=0.08)

class Help(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.back_button = Button(self, text="Back To Menu", bg="#1f1f1f", fg="#ffaa00", activebackground="#212121", font=SUBTITLE_FONT,
                                command=lambda: controller.show_frame(MainMenu))
        self.back_button.place(anchor="center", relx=0.91, rely=0.06, relwidth=0.15, relheight=0.08)



# program section to call the master class and start the program setting window size
if __name__ == "__main__":
    app = MatrixMate()
    app.geometry("1440x810")
    app.mainloop()

